#+begin_src plantuml :file Game_Input.png
title Game Input Handler

class Button_State {
    button: Game_Button
    ended_down: boolean
    counter: number
    pressed_at: number
}

class Game_Input {
    pending_records: Game_Button[]
    button_states: Map<number, button_state>
    press(b: Game_Button)
    increase_count(b: Game_Button)
    release(b: Game_Button)
}

class Game_Input_Handler {
    input: Game_Input
    init(i: Game_Input)
    clear()
    update_input()
    name(): string
}

class Virtual_Controller extends Game_Input_Handler 
class Keyboard extends Game_Input_Handler

enum Game_Button
enum Dpad_Button
enum Action_Button
enum Keyboard_Command_Button

Virtual_Controller --> Game_Button
Virtual_Controller --> Dpad_Button
Virtual_Controller --> Action_Button

Keyboard --> Game_Button
Keyboard --> Keyboard_Command_Button

Game_Input_Handler o-> Game_Input

Game_Input --> Button_State
Game_Input --> Game_Button
#+end_src

#+begin_src plantuml :file Level_Editor.png

title Puzzle Game Level Editor

abstract Game_Mode_Base <<State>> {
    on_enter()
    on_exit()
    save_level()
    handle_key_down(event: EventKeyboard)
    handle_key_up(event: EventKeyboard)
    handle_mouse_down(event: EventMouse)
    handle_mouse_move(event: EventMouse)
    handle_mouse_scroll(event: EventMouse)
    handle_touch_start(event: EventTouch)
    handle_touch_move(event: EventTouch)
    handle_touch_end(event: EventTouch)
}

class Contextual_Manager <<Context>> {
  {static} instance: Contextual_Manager
  game_modes: Game_Mode[]
  current_mode: Game_Mode
  current_mode_idx: number
  is_enabled: boolean
  enable();
  dispose();
  register_events();
  unregister_events();
  switch_mode();
  save_level();
   on_key_up(event: EventKeyboard) 
    on_mouse_down(event: EventMouse)
    on_mouse_move(event: EventMouse)
    on_mouse_scroll(event: EventMouse)
    on_touch_start(event: EventTouch)
    on_touch_move(event: EventTouch)
    on_touch_end(event: EventTouch)
  {static} Settle(i: Contextual_Manager);
}

class Entity_Edit_Mode <<ConcreteStateA>> {
   camera: Camera
  ray: geoMetry.Ray
  copied_entities: Serialize_Entity_Data
  copy_selected_entities()
  paste_copied_entities()
  delete_selected_entities()
  select()
  deselect()
  select_all()
  deselect_all()
  move_selected_entities()
  roatte_selected_entities()
}

class Test_Run_Mode <<ConcreteStateB>> {
  inputs_navigatar: Navigatar
  input_manager: Input_Manager 
  switch_to_prev_input_handler()
  switch_to_next_input_handler()
  show_hints()
  init_ui()
  clear_ui()
}

class Swipe_Camera_Mode <<ConcreteStateC>> {
  controller: Camera_3D_Controller;
}

class Light_Mode <<ConcreteStateD>> {
  controller: Camera_3D_Controller;
}

Entity_Edit_Mode --|> Game_Mode_Base
Test_Run_Mode --|> Game_Mode_Base
Swipe_Camera_Mode --|> Game_Mode_Base
Light_Mode --|> Game_Mode_Base

Contextual_Manager o--> Game_Mode_Base

class Level_Editor <<Client>> {}
Level_Editor --> Contextual_Manager

#+end_src
