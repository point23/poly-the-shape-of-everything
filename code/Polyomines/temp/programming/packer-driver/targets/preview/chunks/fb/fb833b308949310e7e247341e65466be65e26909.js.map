{"version":3,"sources":["file:///A:/code/poly/code/Polyomines/assets/script/Game_Board.ts"],"names":["Coord","_decorator","Component","instantiate","Node","Prefab","Size","Vec3","ccclass","property","constructor","x","y","Game_Board","grid_size","show_grids","width","height","cols","region_size","rows","step_z","step_x","pos_x","origin_pos","half_region_size","half_square_size","row","pos_z","z","col","region","board_region_prefab","setParent","regions","setPosition","coordToWorldPosition","coord","succeed","pos","ZERO","square_size"],"mappings":"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","sourcesContent":["import {_decorator, Component, instantiate, MeshRenderer, Node, Prefab, Size, Vec2, Vec3} from 'cc';\r\n\r\nconst {ccclass, property} = _decorator;\r\n\r\nclass Coord {\r\n  public x: number;\r\n  public y: number;\r\n  public constructor(x: number, y: number) {\r\n    this.x = x;\r\n    this.y = y;\r\n  }\r\n}\r\n\r\n/* NOTE\r\n    - Draw debug info\r\n    - show grids\r\n    - Transform from board coords to world position\r\n */\r\n@ccclass('Game_Board')\r\nexport class Game_Board extends Component {\r\n  @property(Node) regions: Node;\r\n  @property(Prefab) board_region_prefab: Prefab;\r\n\r\n  static region_size = 10;\r\n  static half_region_size = 5;\r\n  static square_size = 1;\r\n  static half_square_size = 0.5;\r\n  static origin_pos = new Vec3(0, 0, 0);\r\n\r\n  grid_size: Size;\r\n\r\n  public show_grids(grid_size: {width: number, height: number}) {\r\n    this.grid_size = new Size(grid_size.width, grid_size.height);\r\n\r\n    let cols = grid_size.width / Game_Board.region_size;\r\n    let rows = grid_size.height / Game_Board.region_size;\r\n    let step_z = Game_Board.region_size;\r\n    let step_x = Game_Board.region_size;\r\n    let pos_x = Game_Board.origin_pos.x + Game_Board.half_region_size - Game_Board.half_square_size;\r\n\r\n    for (let row = 0; row < rows; row++) {\r\n      let pos_z = Game_Board.origin_pos.z + Game_Board.half_region_size- Game_Board.half_square_size;\r\n\r\n      for (let col = 0; col < cols; col++) {\r\n        let region: Node = instantiate(this.board_region_prefab);\r\n\r\n        region.setParent(this.regions);\r\n        region.setPosition(new Vec3(pos_x, 0, pos_z));\r\n\r\n        pos_z += step_z;\r\n      }\r\n\r\n      pos_x += step_x;\r\n    }\r\n  }\r\n\r\n  public coordToWorldPosition(coord: Coord): {succeed: boolean, pos: Vec3} {\r\n    if (coord.x > this.grid_size.width || coord.y > this.grid_size.height) {\r\n      return {succeed: false, pos: Vec3.ZERO};\r\n    }\r\n    let pos = new Vec3(\r\n        coord.y * Game_Board.square_size, 0, coord.x * Game_Board.square_size);\r\n    return {succeed: true, pos: pos};\r\n  }\r\n}\r\n"]}